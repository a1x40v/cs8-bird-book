#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

The number of elements is fixed for the lifetime of the array, so you must specify the size when you create it.

#!csharp

int[] numbers = new int[10];
string[] strings = new string[numbers.Length];

numbers[0] = 42;
numbers[1] = numbers.Length;
numbers[2] = numbers[0] + numbers[1];
numbers[numbers.Length - 1] = 99;

#!markdown

# Array Initialization

#!csharp

var arr1 = new string[3];
arr1[0] = "one";
arr1[1] = "two";
arr1[2] = "three";

var arr2 = new string[] { "one", "two", "three" };

string[] arr3 = { "one", "two", "three"};

var arr4 = new[] { "one", "two", "three" };

#!markdown

# Searching and Sorting

The static **Array.IndexOf** method provides the most straightforward way to search for an element. It does not need your array elements to be in any particular order:
you just pass it the array in which to search and the value you’re looking for, and it will walk through the elements until it finds a value equal to the one you want.

It returns the index at which it found the first matching element, or −1 if it reached the end of the array without finding a match.

#!csharp

var fruits = new[] {"apple", "orange", "lemon"};
int idx = Array.IndexOf(fruits, "apple");
Console.WriteLine(idx);

#!markdown

That example starts its search at the beginning of the array, but you have other options. The IndexOf method is overloaded, and you can pass an index from which to start searching, and optionally a second number indicating how many elements you want it to look at before it gives up. There’s also a **LastIndexOf** method, which works in reverse

You may want to find the first (or last) element that meets some particular criteria and use **Array.FindIndex** for it

#!csharp

var numbers = new[] { 1, 5, 3, 6, 7, 10 };

bool IsGreaterThen(int value) => value > 5;

var idx = Array.FindIndex(numbers, IsGreaterThen);
Console.WriteLine($"idx = {idx}");

var foundVal = Array.Find(numbers, (value => value > 5));
Console.WriteLine($"foundVal = {foundVal}");

var foundVals = Array.FindAll(numbers, value => value > 5);
Console.WriteLine($"foundVals = {string.Join(", ", foundVals)}");

#!csharp

var arr = new[] {1, 2,3 };
Console.WriteLine(arr.Count());
