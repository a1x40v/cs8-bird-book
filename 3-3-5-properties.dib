#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

Class with simple property

#!csharp

public class HasProperty
{
    private int _x;
    public int X
    {
        get
        {
            return _x;
        }
        set
        {
            _x = value;
        }
    }
}

#!csharp

public class HasProperty2
{
    private int _x;
    public int X
    {
        get => _x;
        set => _x = value;
    }
}

#!markdown

The official name in the language specification for this is an automatically implemented property, but these are typically referred to as just auto-properties.

#!csharp

public class HasProperty
{
    public int X { get; set; }
}

#!markdown

There are two variations on read-only properties. Sometimes it is useful to have a property that is publicly read-only, but which your class is free to change.

#!csharp

public class HasPrivateProperty
{
    public int X { get; private set; }
}

#!markdown

If you want your property to be read-only in the sense that its value never changes after construction, you can leave out the setter entirely when using the auto-property syntax

#!csharp

public class HasPrivateProperty2
{
    public int X { get; }
}

#!csharp

public struct Point
{
    public int X { get; set; }
}

public class Item
{
    public Point Location { get; set; }
}

var item = new Item();
item.Location.X = 123; // Will not compile
