#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

C# supports a special form of method called an iterator. An iterator is a method that produces enumerable sequences using a special keyword, yield. Example 5-27 shows a simple iterator and some code that uses it.

#!csharp

// Example 5-27. A simple iterator

public static IEnumerable<int> Countdown(int start, int end)
{
    for (int i = start; i >= end; --i)
    {
        yield return i;
    }
}

private static void Main(string[] args)
{
    foreach (int i in Countdown(5, 1))
    {
        Console.WriteLine(i);
    }
}

#!markdown

Iterators produce values one at a time with yield return statements, and unlike with a normal return, the method can continue to execute after returning a
value—it’s only when the method either runs to the end, or decides to stop early with a yield break statement or by throwing an exception, that it is complete.

Example 5-28 shows this rather more starkly. Each yield return causes a value to be emitted from the sequence, so this one will produce the numbers 1–3.

#!csharp

// Example 5-28. A very simple iterator

public static IEnumerable<int> ThreeNumbers()
{
    yield return 1;
    yield return 2;
    yield return 3;
}
